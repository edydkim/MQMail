<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="org.mail"/>

    <util:list id="locations">
        <value>classpath:datasource.properties</value>
        <value>classpath:mail.properties</value>
    </util:list>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" ref="locations" />
    </bean>

    <bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations" ref="locations" />
    </bean>

    <!-- MEMO: if you need to use aq-jms-connection-factory build-in, see below -->
    <!--
    <bean id="dbcpNativeJdbcExtractor"
          class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"/>
     -->
    <!--
    <orcl:aq-jms-connection-factory id="aqConnectionFactory"
                                    data-source="dataSource"
                                    use-local-data-source-transaction="true"
                                    native-jdbc-extractor="dbcpNativeJdbcExtractor"
                                    connection-factory-type="QUEUE_CONNECTION"
                                   />
    -->

    <task:scheduled-tasks>
        <task:scheduled ref="scheduler" method="reportCurrentTime" cron="0 0/1 * * * *"/>
    </task:scheduled-tasks>

    <bean id="scheduler" class="org.mail.client.Scheduler"/>

    <bean id="connectionFactory" class="org.mail.db.OracleAqFactoryBean">
        <property name="defaultDataSource" ref="defaultDataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="defaultDataSource"/>
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>

    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="sessionTransacted" value="true"/>
        <property name="receiveTimeout" value="-1" />
        <property name="defaultDestinationName" value="${mail.dest.aq.name}"/>
    </bean>

    <bean id="sessionMessageListener" class="org.mail.listener.SessionMessageListener">
        <property name="defaultDataSource" ref="defaultDataSource"/>
        <property name="jmsTemplate" ref="jmsTemplate"/>
    </bean>

    <bean id="messageConverter"
          class="org.springframework.data.jdbc.jms.support.converter.oracle.MappingAdtMessageConverter">
        <constructor-arg>
            <bean class="org.springframework.data.jdbc.jms.support.oracle.StructDatumMapper">
                <constructor-arg index="0" value="${mail.dest.aq.type}"/>
                <constructor-arg index="1" value="org.mail.db.dto.MailInfoParamDto"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="messageListener" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
        <constructor-arg>
            <bean class="org.mail.delegate.DefaultResponsiveMessageDelegate"/>
        </constructor-arg>
        <property name="defaultListenerMethod" value="receive"/>
        <property name="messageConverter" ref="messageConverter"/>
    </bean>

    <bean id="messageListenerContainer" class="org.springframework.data.jdbc.jms.listener.oracle.AdtMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destinationName" value="${mail.dest.aq.name}"/>
        <property name="messageListener" ref="messageListener" />
        <!-- if you want to write a logic using session send message to oracle, use this -->
        <!-- <property name="messageListener" ref="org.mail.listener.SessionMessageListener" /> -->
        <property name="transactionManager" ref="transactionManager"/>
        <property name="errorHandler" ref="errorHandler"/>
        <property name="acceptMessagesWhileStopping" value="false"/>
    </bean>

    <bean id="errorHandler" class="org.mail.delegate.DefaultErrorHandler"/>

    <bean id="defaultDataSource" class="oracle.ucp.jdbc.PoolDataSourceFactory" factory-method="getPoolDataSource">
        <property name="URL" value="${default.dataSource.url}" />
        <property name="user" value="${default.dataSource.username}" />
        <property name="password" value="${default.dataSource.password}" />
        <property name="connectionFactoryClassName" value="${dataSourceClassName}" />
        <property name="minPoolSize" value="10" />
        <property name="maxPoolSize" value="20" />
        <property name="ConnectionPoolName" value="MailPool"/>
        <property name="initialPoolSize" value="5" />
        <property name="inactiveConnectionTimeout" value="120" />
        <property name="validateConnectionOnBorrow" value="true" />
        <property name="maxStatements" value="20" />
    </bean>

    <bean id="secDataSource" class="oracle.ucp.jdbc.PoolDataSourceFactory" factory-method="getPoolDataSource">
        <property name="URL" value="${sec.dataSource.url}" />
        <property name="user" value="${sec.dataSource.username}" />
        <property name="password" value="${sec.dataSource.password}" />
        <property name="connectionFactoryClassName" value="${dataSourceClassName}" />
        <property name="minPoolSize" value="10" />
        <property name="maxPoolSize" value="20" />
        <property name="ConnectionPoolName" value="MailPool"/>
        <property name="initialPoolSize" value="5" />
        <property name="inactiveConnectionTimeout" value="120" />
        <property name="validateConnectionOnBorrow" value="true" />
        <property name="maxStatements" value="20" />
    </bean>


    <!-- HERE IS CONTEXT FOR SENDING MAIL -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.server.host}" />
        <property name="port" value="${mail.server.port}" />
        <property name="protocol" value="${mail.server.protocol}" />
        <property name="defaultEncoding" value="ISO-2022-JP"/>
        <!-- for SSL Auth  -->
        <!--<property name="username" value="${mail.server.username}" />-->
        <!--<property name="password" value="${mail.server.password}" />-->
        <property name="javaMailProperties">
            <util:properties location="classpath:mail.properties" />
        </property>
    </bean>

    <!-- THYMELEAF: Template Resolver for email templates -->
    <bean id="emailTemplateResolver" class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
        <property name="prefix" value="template/" />
        <property name="templateMode" value="HTML5" />
        <property name="characterEncoding" value="UTF-8" />
        <property name="order" value="1" />
        <property name="cacheable" value="true"/>
    </bean>

    <bean id="mailService" class="org.mail.service.MailServiceImpl">
        <property name="resourceLoaderPath" value="classpath:template/"/>
    </bean>

    <!-- THYMELEAF: Template Resolver for webapp pages   -->
    <!-- (we would not need this if our app was not web) -->
    <bean id="webTemplateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
        <property name="prefix" value="mail/" />
        <property name="templateMode" value="HTML5" />
        <property name="characterEncoding" value="UTF-8" />
        <property name="order" value="2" />
        <property name="cacheable" value="true"/>
    </bean>

    <!-- THYMELEAF: Template Engine (Spring3-specific version) -->
    <bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolvers">
            <set>
                <ref bean="emailTemplateResolver" />
                <!-- (we would not need this if our app was not web) -->
                <!--<ref bean="webTemplateResolver" />-->
            </set>
        </property>
    </bean>

    <!-- THYMELEAF: View Resolver - implementation of Spring's ViewResolver interface -->
    <!-- (we would not need this if our app was not web)                              -->
    <bean id="viewResolver" class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine" />
        <property name="characterEncoding" value="UTF-8" />
    </bean>

</beans>
